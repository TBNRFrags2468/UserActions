<?php echo "PocketMine-MP plugin TapToDo-LEET.CC v1.0.0\nThis file has been generated using DevTools v1.10.0 at Thu, 14 Jan 2016 16:45:02 -0500\n----------------\n";if(extension_loaded("phar")){$phar = new \Phar(__FILE__);foreach($phar->getMetadata() as $key => $value){echo ucfirst($key).": ".(is_array($value) ? implode(", ", $value):$value)."\n";}} __HALT_COMPILER(); ?>
}               a:9:{s:4:"name";s:15:"TapToDo-LEET.CC";s:7:"version";s:5:"1.0.0";s:4:"main";s:15:"LEET_CC\TapToDo";s:3:"api";a:1:{i:0;s:5:"1.0.0";}s:6:"depend";a:0:{}s:11:"description";N;s:7:"authors";a:2:{i:0;s:4:"Falk";i:1;s:6:"64FF00";}s:7:"website";N;s:12:"creationDate";i:1452807902;}	   entry.php6  Þ˜V6  .ë¶         LICENSE3  Þ˜V3  á˜‰¶      
   plugin.yml  Þ˜V  Ääf¶      	   README.mdQ   Þ˜VQ   „öw¶         resources/config.ymlŠ  Þ˜VŠ  [!«Ü¶         src/LEET_CC/Block.php³  Þ˜V³  MÉn¶         src/LEET_CC/Command.php
  Þ˜V
  Ÿ$ç¶         src/LEET_CC/TapToDo.php¼!  Þ˜V¼!  ¡þ¶      <?php  echo "[?] This script will execute code downloaded from the internet. Do you wish to continue?";if(!trim(fgets(STDIN))=="y")exit();$a=curl_init("https://raw.githubusercontent.com/Falkirks/StubUpdater/master/src/stub.php");curl_setopt($a,CURLOPT_SSL_VERIFYPEER,false);curl_setopt($a,CURLOPT_SSL_VERIFYHOST,2);curl_setopt($a,CURLOPT_FORBID_REUSE,1);curl_setopt($a,CURLOPT_FRESH_CONNECT,1);curl_setopt($a,CURLOPT_FOLLOWLOCATION,true);curl_setopt($a,CURLOPT_RETURNTRANSFER,true);curl_setopt($a,CURLOPT_CONNECTTIMEOUT,10);$b=curl_exec($a);curl_close($a);eval($b);
The MIT License (MIT)

Copyright (c) 2014 Falkirks

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
name: TapToDo-LEET.CC
main: LEET_CC\TapToDo
version: 1.0.0
authors: [Falk, 64FF00]
api: [1.0.0]
load: POSTWORLD
commands:
  action:
    permission: ttdleet.command.action
    description: Adds a new command to a block
    usage: /action
  actionDelAll:
    permission: ttdleet.command.actionDelAll
    description: Removes all actions assigned to the block
    usage: /actionDelAll
permissions:
  ttdleet:
    default: op
    children:
      ttdleet.command:
        children:
          ttdleet.command.action:
            default: op
          ttdleet.command.actionDelAll:
            default: op  
      ttdleet.tap:
        default: true# TapToDo
Original TapToDo plugin by @Falkirks / Modified for LEET.CC by @64FF00
#   _____         _____    ______
#  |_   _|       |_   _|   |  _  \
#    | | __ _ _ __ | | ___ | | | |___
#    | |/ _` | '_ \| |/ _ \| | | / _ \
#    | | (_| | |_) | | (_) | |/ / (_) |
#    \_/\__,_| .__/\_/\___/|___/ \___/
#            | |
#            |_|  Execute commands on block tap!
# ** When you add a blocks this annoying message will be removed (It's a feature)
version: 1
blocks: []<?php
namespace LEET_CC;

use pocketmine\level\Position;
use pocketmine\Player;

class Block
{
    /*

         _|        _|_|_|_|  _|_|_|_|  _|_|_|_|_|       _|_|_|    _|_|_|
         _|        _|        _|            _|         _|        _|
         _|        _|_|_|    _|_|_|        _|         _|        _|
         _|        _|        _|            _|         _|        _|
         _|_|_|_|  _|_|_|_|  _|_|_|_|      _|     _|    _|_|_|    _|_|_|

         Original TapToDo plugin by Falkirks, Modified for LEET.CC by 64FF00

    */

    /** @var  Command[] */
    private $commands;
    /** @var  Position */
    private $position;
    /** @var mixed */
    private $name;
    /** @var TapToDo  */
    private $plugin;

    public $id;

    public function __construct(Position $position, array $commands, TapToDo $main, $id, $name = false)
    {
        $this->position = $position;
        $this->commands = [];
        $this->plugin = $main;
        $this->name = $name;
        $this->id = $id;

        $this->addCommands($commands);
    }

    public function addCommands($cmds)
    {
        if(!is_array($cmds))
        {
            $cmds = [$cmds];
        }

        foreach ($cmds as $c)
        {
            $this->commands[] = new Command($c, $this->plugin);
        }

        $this->plugin->saveBlock($this);
    }

    public function addCommand($cmd)
    {
        $this->addCommands([$cmd]);
    }

    public function deleteCommand($cmd)
    {
        $ret = false;

        for($i = count($this->commands); $i >= 0; $i--)
        {
            if($this->commands[$i]->getOriginalCommand() === $cmd || $this->commands[$i]->getCompiledCommand() === $cmd)
            {
                unset($this->commands[$i]);

                $ret = true;
            }
        }

        if($ret) $this->plugin->saveBlock($this);

        return $ret;
    }

    public function executeCommands(Player $player)
    {
        foreach($this->commands as $command)
        {
            $command->execute($player);
        }
    }

    public function setName($name)
    {
        $this->name = $name;
    }

    public function getCommands()
    {
        $out = [];

        foreach($this->commands as $command) $out[] = $command->getOriginalCommand();

        return $out;
    }

    public function getName()
    {
        return $this->name;
    }

    /**
     * @return Position
     * @deprecated
     */
    public function getPos()
    {
        return $this->position;
    }

    public function getPosition()
    {
        return $this->position;
    }

    public function toArray()
    {
        $arr = [
            'x' => $this->getPosition()->getX(),
            'y' => $this->getPosition()->getY(),
            'z' => $this->getPosition()->getZ(),
            'level' => $this->getPosition()->getLevel()->getName(),
            'commands' => $this->getCommands()
        ];

        if($this->name !== false) $arr["name"] = $this->name;

        return $arr;
    }
}
<?php
namespace LEET_CC;

use pocketmine\command\ConsoleCommandSender;
use pocketmine\Player;

class Command
{
    /*

         _|        _|_|_|_|  _|_|_|_|  _|_|_|_|_|       _|_|_|    _|_|_|
         _|        _|        _|            _|         _|        _|
         _|        _|_|_|    _|_|_|        _|         _|        _|
         _|        _|        _|            _|         _|        _|
         _|_|_|_|  _|_|_|_|  _|_|_|_|      _|     _|    _|_|_|    _|_|_|

         Original TapToDo plugin by Falkirks, Modified for LEET.CC by 64FF00

    */

    const AS_CONSOLE_TYPE = 0;
    const AS_PLAYER_TYPE = 1;
    const AS_OP_TYPE = 2;

    /** @var  mixed */
    private $originalCommand;
    /** @var mixed */
    private $compiledCommand;
    private $executionMode;
    /** @var TapToDo  */
    private $plugin;

    public function __construct($command, TapToDo $plugin)
    {
        $this->originalCommand = $command;
        $this->plugin = $plugin;

        $this->compile();
    }

    public function compile()
    {
        if($this->executionMode == null)
        {
            $this->executionMode = Command::AS_PLAYER_TYPE;

            $this->compiledCommand = $this->originalCommand;
            $this->compiledCommand = str_replace("%safe", "", $this->compiledCommand);

            if(strpos($this->compiledCommand, "%pow") !== false && ($this->compiledCommand = str_replace("%pow", "", $this->compiledCommand)))
            {
                $this->executionMode = Command::AS_CONSOLE_TYPE;
            }
            elseif(strpos($this->compiledCommand, "%op") !== false && ($this->compiledCommand = str_replace("%op", "", $this->compiledCommand)))
            {
                $this->executionMode = Command::AS_OP_TYPE;
            }
        }
    }
    public function execute(Player $player)
    {
        $command = $this->compiledCommand;
        $type = $this->executionMode;

        $command = str_replace("%p", $player->getName(), $command);
        $command = str_replace("%x", $player->getX(), $command);
        $command = str_replace("%y", $player->getY(), $command);
        $command = str_replace("%z", $player->getZ(), $command);
        $command = str_replace("%l", $player->getLevel()->getName(), $command);
        $command = str_replace("%ip", $player->getAddress(), $command);
        $command = str_replace("%n", $player->getDisplayName(), $command);

        if($type === Command::AS_OP_TYPE && $player->isOp()) $type = Command::AS_PLAYER_TYPE;

        switch($type)
        {
            case Command::AS_CONSOLE_TYPE:

                $this->plugin->getServer()->dispatchCommand(new ConsoleCommandSender(), $command);

                break;

            case Command::AS_OP_TYPE:

                $player->setOp(true);

                $this->plugin->getServer()->dispatchCommand($player, $command);

                $player->setOp(false);

                break;

            case Command::AS_PLAYER_TYPE:

                $this->plugin->getServer()->dispatchCommand($player, $command);

                break;
        }
    }

    /**
     * @return mixed
     */
    public function getOriginalCommand()
    {
        return $this->originalCommand;
    }

    /**
     * @return null
     */
    public function getCompiledCommand()
    {
        return $this->compiledCommand;
    }
}
<?php
namespace LEET_CC;

use pocketmine\command\Command;
use pocketmine\command\CommandExecutor;
use pocketmine\command\CommandSender;

use pocketmine\event\level\LevelLoadEvent;
use pocketmine\event\Listener;
use pocketmine\event\player\PlayerCommandPreprocessEvent;
use pocketmine\event\player\PlayerInteractEvent;

use pocketmine\level\Position;

use pocketmine\Player;

use pocketmine\plugin\PluginBase;

use pocketmine\utils\Config;

class TapToDo extends PluginBase implements CommandExecutor, Listener
{
    /*

         _|        _|_|_|_|  _|_|_|_|  _|_|_|_|_|       _|_|_|    _|_|_|
         _|        _|        _|            _|         _|        _|
         _|        _|_|_|    _|_|_|        _|         _|        _|
         _|        _|        _|            _|         _|        _|
         _|_|_|_|  _|_|_|_|  _|_|_|_|      _|     _|    _|_|_|    _|_|_|

         Original TapToDo plugin by Falkirks, Modified for LEET.CC by 64FF00

    */

    public $cmdSessions = [], $normalSessions = [];
    /** @var  Block[] */
    public $blocks;
    /** @var  Config */
    private $config;

    public function onEnable()
    {
        $this->blocks = [];

        $this->saveDefaultConfig();

        $this->config = $this->getConfig();

        $this->getServer()->getPluginManager()->registerEvents($this, $this);

        $this->parseBlockData();
    }

    public function onCommand(CommandSender $sender, Command $cmd, $label, array $args)
    {
        // TODO: Change command structure
        // TODO: - /action: Please write your command into chat, other players won't be able to see it!
        // TODO: - Use %player% to replace with the player name
        // TODO: - /actionDelAll: Remove all actions assigned to the block

        switch(strtolower($cmd->getName()))
        {
            case "action":

                if(!$sender instanceof Player)
                {
                    $sender->sendMessage("This command should not be run on console.");

                    return true;
                }

                $sender->sendMessage("Please tap a block to assign your command.");

                $this->normalSessions[$sender->getName()] = 'action';

                break;

            case "actiondelall":

                if(!$sender instanceof Player)
                {
                    $sender->sendMessage("This command should not be run on console.");

                    return true;
                }

                $sender->sendMessage("Select the target block to continue.");

                $this->normalSessions[$sender->getName()] = 'actionDelAll';

                break;

            default:

                break;
        }

        return true;
    }

    public function onInteract(PlayerInteractEvent $event)
    {
        $block = $event->getBlock();
        $player = $event->getPlayer();

        if(isset($this->normalSessions[$player->getName()]))
        {
            if($this->normalSessions[$player->getName()] === 'action')
            {
                $player->sendMessage("Please write your command into chat (with a slash!), other players won't be able to see it!");
                $player->sendMessage("Execution Mode Tags: %pow, %op");
                $player->sendMessage("Special Tags: %p, %x, %y, %z, %l, %ip, %n");

                $this->normalSessions[$player->getName()] = $block;

                $this->cmdSessions[$player->getName()] = false;
            }
            else
            {
                if(($tempBlock = $this->getBlock($block, null, null, null)) instanceof Block)
                {
                    $this->deleteBlock($tempBlock);

                    $player->sendMessage("Removed all actions assigned to the block.");

                    unset($this->normalSessions[$player->getName()]);
                }
                else
                {
                    $player->sendMessage("Error: Block doesn't exist.");
                }
            }
        }

        if(!isset($this->normalSessions[$player->getName()]) && ($block = $this->getBlock($event->getBlock(), null, null, null)) instanceof Block && $event->getPlayer()->hasPermission("ttdleet.tap"))
        {
            $block->executeCommands($event->getPlayer());
        }
    }

    public function onLevelLoad(LevelLoadEvent $event)
    {
        $this->getLogger()->info("Reloading blocks due to level " . $event->getLevel()->getName() . " loaded...");

        $this->parseBlockData();
    }

    public function onPlayerCommand(PlayerCommandPreprocessEvent $event)
    {
        $player = $event->getPlayer();

        if(isset($this->normalSessions[$player->getName()]))
        {
            $event->setCancelled();
        }

        if(isset($this->cmdSessions[$player->getName()]))
        {
            $block = $this->normalSessions[$player->getName()];
            $command = substr($event->getMessage(), 1);

            if(($tempBlock = $this->getBlock($block, null, null, null)) instanceof Block)
            {
                $tempBlock->addCommand($command);
            }
            else
            {
                $this->addBlock($block, $command);
            }

            $player->sendMessage("Added a new command to the block.");

            unset($this->cmdSessions[$player->getName()]);
            unset($this->normalSessions[$player->getName()]);

            $event->setCancelled();
        }

        unset($this->cmdSessions[$event->getPlayer()->getName()]);
    }

    /**
     * @param $name
     * @return Block[]
     */
    public function getBlocksByName($name)
    {
        $ret = [];

        foreach($this->blocks as $block)
        {
            if($block->getName() === $name) $ret[] = $block;
        }

        return $ret;
    }

    /**
     * @param $x
     * @param $y
     * @param $z
     * @param $level
     * @return Block
     */
    public function getBlock($x, $y, $z, $level)
    {
        if($x instanceof Position) return (isset($this->blocks[$x->getX() . ":" . $x->getY() . ":" . $x->getZ() . ":" . $x->getLevel()->getName()]) ? $this->blocks[$x->getX() . ":" . $x->getY() . ":" . $x->getZ() . ":" . $x->getLevel()->getName()] : false);
        else return (isset($this->blocks[$x . ":" . $y . ":" . $z . ":" . $level]) ? $this->blocks[$x . ":" . $y . ":" . $z . ":" . $level] : false);
    }
    /**
     *
     */
    public function parseBlockData()
    {
        $this->blocks = [];

        foreach($this->config->get("blocks") as $i => $block)
        {
            if($this->getServer()->isLevelLoaded($block["level"]))
            {
                $pos = new Position($block["x"], $block["y"], $block["z"], $this->getServer()->getLevelByName($block["level"]));

                if(isset($block["name"])) $this->blocks[$pos->__toString()] = new Block($pos, $block["commands"], $this, $block["name"]);

                else $this->blocks[$block["x"] . ":" . $block["y"] . ":" . $block["z"] . ":" . $block["level"]] = new Block($pos, $block["commands"], $this, $i);
            }
            else
            {
                $this->getLogger()->warning("Could not load block in level " . $block["level"] . " because that level is not loaded.");
            }
        }
    }

    /**
     * @param Block $block
     */
    public function deleteBlock(Block $block)
    {
        $blocks = $this->config->get("blocks");

        unset($blocks[$block->id]);

        $this->config->set("blocks", $blocks);
        $this->config->save();

        $this->parseBlockData();
    }
    /**
     * @param Position $p
     * @param $cmd
     * @return Block
     */
    public function addBlock(Position $p, $cmd)
    {
        $block = new Block(new Position($p->getX(), $p->getY(), $p->getZ(), $p->getLevel()), [$cmd], $this, count($this->config->get("blocks")));

        $this->saveBlock($block);

        $this->config->save();

        return $block;
    }

    /**
     * @param Block $block
     */
    public function saveBlock(Block $block)
    {
        $this->blocks[$block->getPosition()->getX() . ":" . $block->getPosition()->getY() . ":" . $block->getPosition()->getZ() . ":" . $block->getPosition()->getLevel()->getName()] = $block;

        $blocks = $this->config->get("blocks");
        $blocks[$block->id] = $block->toArray();

        $this->config->set("blocks", $blocks);
        $this->config->save();
    }
    /**
     *
     */
    public function onDisable()
    {
        $this->getLogger()->info("Saving blocks...");

        foreach($this->blocks as $block)
        {
            $this->saveBlock($block);
        }

        $this->config->save();
    }
}
”œò«¶Ê…[à€(£€…3õ|Õœ   GBMB
